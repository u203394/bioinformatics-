Healthy <- df2[df2$Group=="healthy",]
head(Healthy)
df2$Group=="schizophrenia"
Schizophrenia <- df2[df2$Group=="schizophrenia",]
head(Schizophrenia)
#Per la fòrmula del t test necessitem mean, standard deviation, i sample size pel grup amb esquizofrènia i sense esquizofrènia. Hem de tenir en compte la fòrmula per una two sample t-test
function1 <- function (sch, nosch) {
mean_nosch <- mean(nosch)
sd_nosch <- sd(nosch)
n_nosch <- length(nosch)
mean_sch <- mean(sch)
sd_sch <- sd(sch)
n_sch <- length(sch)
t <- (mean_sch - mean_nosch) / sqrt((sd_sch^2 / n_sch) + (sd_nosch^2 / n_nosch))
}
#Do patients with schizophrenia have a different BMI from healthy controls?
##Extraiem els valors de la columna BMI i fem una funció per comparar sch amb sans
BMI_sch <- Schizophrenia$BMI
BMI_nosch <- Healthy$BMI
function1(BMI_sch, BMI_nosch)
t_BMI <- function1(BMI_sch, BMI_nosch)
##El resultat que dona (1,942... ens indica que la mitjana de BMI en schizophrenia és major)
#Do patients with schizophrenia have a different Streptococcus abundance from healthy controls?
##Extraiem els valors de la columna Streptococcus abundance i fem una funció per comparar sch amb sans
abund_sch <- Schizophrenia$Streptococcus_Abundance
abund_nosch <- Healthy$Streptococcus_Abundance
function1(abund_sch, abund_nosch)
t_abund <- function1(abund_sch, abund_nosch)
mean_nosch <- mean(nosch)
df2 <- read.table(file = "~/BIOINFORMATICA/P2/Zhu_2020.txt",header = T, sep = "\t",row.names = 1)
is.data.frame(df2)
df2 <- as.data.frame(df2)
#Separem el banc de dades de Schizophrenia i de healthy. Ens torna un vector lògic de True o False
#Amb true i false ens torna la localització, ara extrec totes les files de TRUE per crear banc de dades de healthy
df2$Group=="healthy"
Healthy <- df2[df2$Group=="healthy",]
head(Healthy)
df2$Group=="Schizophreniaizophrenia"
Schizophreniaizophrenia <- df2[df2$Group=="Schizophreniaizophrenia",]
head(Schizophreniaizophrenia)
#Per la fòrmula del t test necessitem mean, standard deviation, i sample size pel grup amb esquizofrènia i sense esquizofrènia. Hem de tenir en compte la fòrmula per una two sample t-test
function1 <- function (Schizophreniaizophrenia, Healthy) {
mean_Healthy <- mean(Healthy)
sd_Healthy <- sd(Healthy)
n_Healthy <- length(Healthy)
mean_Schizophrenia <- mean(Schizophrenia)
sd_Schizophrenia <- sd(Schizophrenia)
n_Schizophrenia <- length(Schizophrenia)
t <- (mean_Schizophrenia - mean_Healthy) / sqrt((sd_Schizophrenia^2 / n_Schizophrenia) + (sd_Healthy^2 / n_Healthy))
}
View(Schizophreniaizophrenia)
df2 <- read.table(file = "~/BIOINFORMATICA/P2/Zhu_2020.txt",header = T, sep = "\t",row.names = 1)
is.data.frame(df2)
df2 <- as.data.frame(df2)
#Separem el banc de dades de Schizophrenia i de healthy. Ens torna un vector lògic de True o False
#Amb true i false ens torna la localització, ara extrec totes les files de TRUE per crear banc de dades de healthy
df2$Group=="healthy"
Healthy <- df2[df2$Group=="healthy",]
head(Healthy)
df2$Group=="Schizophrenia"
Schizophrenia <- df2[df2$Group=="Schizophrenia",]
head(Schizophreniaizophrenia)
rm(Schizophreniaizophrenia)
rm(abund_nosch, abund_sch, BMI_nosch, BMI_sch)
function1 <- function (Schizophrenia, Healthy) {
mean_Healthy <- mean(Healthy)
sd_Healthy <- sd(Healthy)
n_Healthy <- length(Healthy)
mean_Schizophrenia <- mean(Schizophrenia)
sd_Schizophrenia <- sd(Schizophrenia)
n_Schizophrenia <- length(Schizophrenia)
t <- (mean_Schizophrenia - mean_Healthy) / sqrt((sd_Schizophrenia^2 / n_Schizophrenia) + (sd_Healthy^2 / n_Healthy))
}
View(function1)
mean(Healthy)
mean_Healthy
return(t)
t
t_value <- (mean_Schizophrenia - mean_Healthy) / sqrt((sd_Schizophrenia^2 / n_Schizophrenia) + (sd_Healthy^2 / n_Healthy))
mean_Schizophrenia <- mean(Schizophrenia)
mean_Healthy <- mean(Healthy)
View(Schizophrenia)
Schizophrenia <- df2[df2$Group=="Schizophrenia",]
Schizophrenia <- df2[df2$Group=="Schizophrenia",]
View(Schizophrenia)
df2 <- read.table(file = "~/BIOINFORMATICA/P2/Zhu_2020.txt",header = T, sep = "\t",row.names = 1)
is.data.frame(df2)
df2 <- as.data.frame(df2)
#Separem el banc de dades de Schizophrenia i de healthy. Ens torna un vector lògic de True o False
#Amb true i false ens torna la localització, ara extrec totes les files de TRUE per crear banc de dades de healthy
df2$Group=="healthy"
Healthy <- df2[df2$Group=="healthy",]
head(Healthy)
df2$Group=="Schizophrenia"
Schizophrenia <- df2[df2$Group=="Schizophrenia",]
head(Schizophreniaizophrenia)
b true i false ens torna la localització, ara extrec totes les files de TRUE per crear banc de dades de healthy
df2$Group=="healthy"
Healthy <- df2[df2$Group=="healthy",]
head(Healthy)
df2$Group=="schizophrenia"
Schizophrenia <- df2[df2$Group=="Schizophrenia",]
head(Schizophreniaizophrenia)
df2$Group=="schizophrenia"
Schizophrenia <- df2[df2$Group=="schizophrenia",]
head(Schizophreni)
mean_Schizophrenia <- mean(Schizophrenia)
#Per la fòrmula del t test necessitem mean, standard deviation, i sample size pel grup amb esquizofrènia i sense esquizofrènia. Hem de tenir en compte la fòrmula per una two sample t-test
function1 <- function (Schizophrenia, Healthy) {
mean_Healthy <- mean(healthy)
sd_Healthy <- sd(healthy)
n_Healthy <- length(healthy)
mean_Schizophrenia <- mean(schizophrenia)
sd_Schizophrenia <- sd(schizophrenia)
n_Schizophrenia <- length(schizophrenia)
t_value <- (mean_schizophrenia - mean_healthy) / sqrt((sd_schizophrenia^2 / n_schizophrenia) + (sd_healthy^2 / n_healthy))
}
head(Healthy)
head(Schizophrenia)
rm(mean_Healthy, mean_Schizophrenia)
df2 <- read.table(file = "~/BIOINFORMATICA/P2/Zhu_2020.txt",header = T, sep = "\t",row.names = 1)
df2 <- read.table(file = "~/BIOINFORMATICA/P2/Zhu_2020.txt",header = T, sep = "\t",row.names = 1)
is.data.frame(df2)
df2 <- as.data.frame(df2)
#Amb true i false ens torna la localització, ara extrec totes les files de TRUE per crear banc de dades de healthy
df2$Group=="healthy"
Healthy <- df2[df2$Group=="healthy",]
head(Healthy)
df2$Group=="schizophrenia"
Schizophrenia <- df2[df2$Group=="schizophrenia",]
head(Schizophrenia)
#Per la fòrmula del t test necessitem mean, standard deviation, i sample size pel grup amb esquizofrènia i sense esquizofrènia. Hem de tenir en compte la fòrmula per una two sample t-test
function1 <- function (Schizophrenia, Healthy) {
mean_Healthy <- mean(healthy)
sd_Healthy <- sd(healthy)
n_Healthy <- length(healthy)
mean_Schizophrenia <- mean(schizophrenia)
sd_Schizophrenia <- sd(schizophrenia)
n_Schizophrenia <- length(schizophrenia)
t_value <- (mean_schizophrenia - mean_healthy) / sqrt((sd_schizophrenia^2 / n_schizophrenia) + (sd_healthy^2 / n_healthy))
}
mean_Healthy <- mean(healthy)
#Per la fòrmula del t test necessitem mean, standard deviation, i sample size pel grup amb esquizofrènia i sense esquizofrènia. Hem de tenir en compte la fòrmula per una two sample t-test
function1 <- function (Schizophrenia, Healthy) {
mean_Healthy <- mean(healthy)
sd_Healthy <- sd(healthy)
n_Healthy <- length(healthy)
mean_Schizophrenia <- mean(schizophrenia)
sd_Schizophrenia <- sd(schizophrenia)
n_Schizophrenia <- length(schizophrenia)
t_value <- (mean_schizophrenia - mean_healthy) / sqrt((sd_schizophrenia^2 / n_schizophrenia) + (sd_healthy^2 / n_healthy))
}
#Per la fòrmula del t test necessitem mean, standard deviation, i sample size pel grup amb esquizofrènia i sense esquizofrènia. Hem de tenir en compte la fòrmula per una two sample t-test
function1 <- function (Schizophrenia, Healthy)
mean_Healthy <- mean(healthy)
sd_Healthy <- sd(healthy)
##Extraiem els valors de la columna BMI
BMI_Schizophrenia <- Schizophreniaizophrenia$BMI
##Extraiem els valors de la columna BMI
BMI_Schizophrenia <- Schizophrenia$BMI
BMI_Healthy <- Healthy$BMI
##Extraiem els valors de la columna Streptococcus abundance i fem una funció per comparar Schizophrenia amb sans
abund_Schizophrenia <- Schizophreniaizophrenia$Streptococcus_Abundance
abund_Healthy <- Healthy$Streptococcus_Abundance
#Calculem degrees of freedom (df)
df <- ((sd_Healthy^2 / n_Healthy^2 + sd_Schizophrenia^2 / n_Schizophrenia)^2) / (((sd_Healthy^2 / n_Healthy)^2 / (n_Healthy - 1)) + (( sd_Schizophrenia^2 / n_Schizophrenia)^2 / (n_Schizophrenia - 1)))
#Asumim un nivell de confiança de 95%, per tant alfa serà 0,005
alpha <- 0.05
t_critical <- qt(1 - alpha/2, df)
View(Healthy)
View(Schizophrenia)
num_Healthy <- sum (df2$Group == "schizophrenia")
rm(num_Healthy)
num_Healthy <- sum (df2$Group == "healthy")
num_Schizophrenia <- sum(df2$Group == "schizophrenia")
df2 <- read.table(file = "~/BIOINFORMATICA/P2/Zhu_2020.txt",header = T, sep = "\t",row.names = 1)
is.data.frame(df2)
df2 <- as.data.frame(df2)
#Amb true i false ens torna la localització, ara extrec totes les files de TRUE per crear banc de dades de healthy
df2$Group=="healthy"
Healthy <- df2[df2$Group=="healthy",]
head(Healthy)
df2$Group=="schizophrenia"
Schizophrenia <- df2[df2$Group=="schizophrenia",]
mean_Healthy <- mean(healthy)
df2 <- read.table(file = "~/BIOINFORMATICA/P2/Zhu_2020.txt",header = T, sep = "\t",row.names = 1)
is.data.frame(df2)
df2 <- as.data.frame(df2)
#Amb true i false ens torna la localització, ara extrec totes les files de TRUE per crear banc de dades de healthy
df2$Group=="healthy"
Healthy <- df2[df2$Group=="healthy",]
head(Healthy)
df2$Group=="schizophrenia"
Schizophrenia <- df2[df2$Group=="schizophrenia",]
head(Schizophrenia)
mean_Healthy <- mean(healthy)
mean_Healthy <- mean(Healthy)
meanBMI_Healthy <- mean(Healthy$BMI)
rm(mean_Healthy)
sdBMI_Healthy <- sd(Healthy)
nBMI_Healthy <- length(Healthy)
sdBMI_Healthy <- sd(Healthy$BMI)
nBMI_Healthy <- length(Healthy$BMI)
meanBMI_Schizophrenia <- mean(Schizophrenia$BMI)
sdBMI_Schizophrenia <- sd(Schizophrenia$BMI)
nBMI_Schizophrenia <- length(Schizophrenia$BMI)
tBMI_value <- (meanBMI_schizophrenia - meanBMI_healthy) / sqrt((sdBMI_schizophrenia^2 / nBMI_schizophrenia) + (sdBMI_healthy^2 / nBMI_healthy))
tBMI_value <- (meanBMI_Schizophrenia - meanBMI_Healthy) / sqrt((sdBMI_Schizophrenia^2 / nBMI_Schizophrenia) + (sdBMI_Healthy^2 / nBMI_Healthy))
tBMI_value <- (meanBMI_Healthy - meanBMI_Schizophrenia) / sqrt((sdBMI_Schizophrenia^2 / nBMI_Schizophrenia) + (sdBMI_Healthy^2 / nBMI_Healthy))
meanAbund_Healthy <- mean(Healthy$Streptococcus_Abundance)
sdAbund_Healthy <- sd(Healthy$Streptococcus_Abundance)
nAbund_Healthy <- length(Healthy$Streptococcus_Abundance)
meanAbund_Schizophrenia <- mean(Schizophrenia$Streptococcus_Abundance)
sdAbund_Schizophrenia <- sd(Schizophrenia$Streptococcus_Abundance)
nAbund_Schizophrenia <- length(Schizophrenia$Streptococcus_Abundance)
tAbund_value <- (meanAbund_Healthy - meanAbund_Schizophrenia) / sqrt((sdAbund_Schizophrenia^2 / nAbund_Schizophrenia) + (sdAbund_Healthy^2 / nAbund_Healthy))
tAbund_value <- (meanAbund_Schizophrenia - meanAbund_Healthy) / sqrt((sdAbund_Schizophrenia^2 / nAbund_Schizophrenia) + (sdAbund_Healthy^2 / nAbund_Healthy))
#Calculem degrees of freedom (df)
df <- ((sdBMI_Healthy^2 / nBMI_Healthy^2 + sdBMI_Schizophrenia^2 / nBMI_Schizophrenia)^2) / (((sdBMI_Healthy^2 / nBMI_Healthy)^2 / (nBMI_Healthy - 1)) + (( sdBMI_Schizophrenia^2 / nBMI_Schizophrenia)^2 / (nBMI_Schizophrenia - 1)))
#Calculem degrees of freedom (df)
dfBMI <- ((sdBMI_Healthy^2 / nBMI_Healthy^2 + sdBMI_Schizophrenia^2 / nBMI_Schizophrenia)^2) / (((sdBMI_Healthy^2 / nBMI_Healthy)^2 / (nBMI_Healthy - 1)) + (( sdBMI_Schizophrenia^2 / nBMI_Schizophrenia)^2 / (nBMI_Schizophrenia - 1)))
dfAbund <- ((sdAbund_Healthy^2 / nAbund_Healthy^2 + sdAbund_Schizophrenia^2 / nAbund_Schizophrenia)^2) / (((sdAbund_Healthy^2 / nAbund_Healthy)^2 / (nAbund_Healthy - 1)) + (( sdAbund_Schizophrenia^2 / nAbund_Schizophrenia)^2 / (nAbund_Schizophrenia - 1)))
rm(df)
#Calcular el p-value para un test de dos colas
p_valueBMI <- 2 * (1 - pt(abs(tBMI_value), dfBMI))
##P value més petit que 0,05 per tant si hi ha diferencia significativa
p_valueAbund <- 2 * (1 - pt(abs(tAbund_value), dfAbund))
# Mostrar el p-value
p_valueAbund
p_valueBMI
#first, it is important to install the packages
install.packages(c("stringr", "ggplot2"))
library(stringr)
library(ggplot2)
#We load the dataset of the file train.csv
myData <- read.csv("train.csv")
#Histrogram: protein abundance
hist(myData$mean_protein_abundance, main = "Abundance distribution",
xlab = "Mean", col = "lightblue")
summary(myData$mean_protein_abundance)
statistics <- summary(myData$mean_protein_abundance)
range <- c(min_value = statistics["Min."], max_value = statistics["Max."])
print(range)
statistics <- summary(myData$mean_protein_abundance)
#We load the dataset of the file train.csv
myData <- read.csv("train.csv")
setwd("~/BIOINFORMATICA/P10,11/PracticalML_update")
#first, it is important to install the packages
install.packages(c("stringr", "ggplot2"))
library(stringr)
library(ggplot2)
#We load the dataset of the file train.csv
myData <- read.csv("train.csv")
#Histrogram: protein abundance
hist(myData$mean_protein_abundance, main = "Abundance distribution",
xlab = "Mean", col = "lightblue")
summary(myData$mean_protein_abundance)
statistics <- summary(myData$mean_protein_abundance)
range <- c(min_value = statistics["Min."], max_value = statistics["Max."])
print(range)
cat("The range of expression values is:", range[1], "to", range[2])
AUG_location <- str_locate(myData$sequence_variant, "ATG")
myData$AUG_start <- AUG_location[,1]
# Simple scatter plot
qplot(x = as.factor(AUG_start), y = mean_protein_abundance, data=myData)
qplot(x = as.factor(AUG_start), y = mean_protein_abundance, data=myData, geom="boxplot")
modeldata <- data.frame(response = myData$mean_protein_abundance, predictors)
linear <- lm(response ~ ., data = modeldata)
summary(linear)
validation_data <- read.csv("valid.csv")
validation_data$predicted <- predict(linear, as.data.frame(predictors.valid))
cor(validation_data$mean_protein_abundance, validation_data$predicted)
predicted <- predict(linear, newdata = as.data.frame(predictors.valid))
modeldata <- data.frame(response = myData$mean_protein_abundance, predictors)
load("~/BIOINFORMATICA/P10,11/PracticalML_update/predictors.rda")
load("~/BIOINFORMATICA/P10,11/PracticalML_update/predictors2.rda")
modeldata <- data.frame(response = myData$mean_protein_abundance, predictors)
linear <- lm(response ~ ., data = modeldata)
summary(linear)
validation_data <- read.csv("valid.csv")
validation_data$predicted <- predict(linear, as.data.frame(predictors.valid))
cor(validation_data$mean_protein_abundance, validation_data$predicted)
predicted <- predict(linear, newdata = as.data.frame(predictors.valid))
View(predictors2)
modeldata2 <- data.frame(response = myData$mean_protein_abundance, predictors2)
linear2 <- lm(response ~ ., data = modeldata)
summary(linear2)
modeldata2 <- data.frame(response = myData$mean_protein_abundance, predictors2)
linear2 <- lm(response ~ ., data = modeldata2)
summary(linear2)
plot(predict(linear2), modeldata2$response)
validation_data2 <- read.csv("valid.csv")
View(validation_data2)
View(validation_data)
modeldata <- data.frame(response = myData$mean_protein_abundance, predictors)
linear <- lm(response ~ ., data = modeldata)
summary(linear)
modeldata <- data.frame(response = myData$mean_protein_abundance, predictors)
linear <- lm(response ~ ., data = modeldata)
summary(linear)
validation_data <- read.csv("valid.csv")
validation_data$predicted <- predict(linear, as.data.frame(predictors.valid))
cor(validation_data$mean_protein_abundance, validation_data$predicted)
predicted <- predict(linear, newdata = as.data.frame(predictors.valid))
plot(predict(linear2), modeldata)
plot(predict(linear2), modeldata2)
#PART 2
modeldata2 <- data.frame(response = myData$mean_protein_abundance, predictors2)
linear2 <- lm(response ~ ., data = modeldata2)
summary(linear2)
plot(predict(linear2), modeldata2)
plot(predict(linear2), modeldata2$response)
validation_data2 <- read.csv("valid.csv")
validation_data2$predicted <- predict(linear2, as.data.frame(predictors.valid2))
cor(validation_data2$mean_protein_abundance, validation_data2$predicted)
predicted2 <- predict(linear2, newdata = as.data.frame(predictors.valid2))
## Applying advanced machine learning tools
install.packages(c("ranger", "glmnet"))
library(ranger)
library(glmnet)
# Fit a Random Forest model
forest <- ranger(response ~ ., data = modeldata2)
# Compute R² on training data
predicted_train_rf <- predict(forest, data = modeldata2)$predictions
R2_train_rf <- 1 - sum((predicted_train_rf - modeldata2$response)^2) /
sum((modeldata2$response - mean(modeldata2$response))^2)
# Compute R² on validation data
predicted_valid_rf <- predict(forest, data = as.data.frame(predictors.valid2))$predictions
R2_valid_rf <- 1 - sum((predicted_valid_rf - response.valid)^2) /
sum((response.valid - mean(response.valid))^2)
rm(R2_train_rf)
?ranger
version
rg.iris <- ranger(Species ~ ., data = iris, importance = "impurity")
rg.iris$variable.importance
rg.iris$variable.importance
forest$variable.importance
# Random forest model
forest <- ranger(response ~ ., data = modeldata2)
# training data
predicted_train_rf <- predict(forest, data = modeldata2)$predictions
# validation data
predicted_valid_rf <- predict(forest, data = as.data.frame(predictors.valid2))$predictions
?ranger
forest$variable.importance
forest <- ranger(response ~ ., data = modeldata2, importance = "impurity")
forest$variable.importance
importance <- importance(forest)
Most_important <- sort(importance, decreasing = TRUE)[1:10]
Most_important
#Lasso regression
lasso <- cv.glmnet(predictors2_mat, response)
#Lasso regression
lasso <- cv.glmnet(predictors2, response)
#matrix form
predictors2_mat <- as.matrix(predictors2)
response <- myData$mean_protein_abundance
rm(predictors2_mat)
#matrix form
predictors2_matrix <- as.matrix(predictors2)
response <- myData$mean_protein_abundance
#Lasso regression
lasso <- cv.glmnet(predictors2_matrix, response)
#optimal lambda
lasso$lambda.min
plot(lasso)
predict(lasso, newx = predictors.valid2[,colnames(predictors2)], s = "lambda.1se")
plot(lasso)
summary(linear2_simple)
?preditct.glmnet
?predict.glmnet
lasso
plot(lasso)
predict(lasso, newx = predictors.valid2[,colnames(predictors2)], s = "lambda.1se")
lasso_predictions <- predict(lasso, newx = predictors.valid2[,colnames(predictors2)], s = "lambda.1se")
coefficients <- coef(lasso, s = "lambda.1se")
print(coefficients)
plot(lasso)
lasso_predictions <- predict(lasso, newx = predictors.valid2[,colnames(predictors2)], s = "lambda.1se")
print(coefficients)
cor(lasso_predictions[,1], validation_data2$mean_protein_abundance) ^2
coefficients <- coef(lasso, s = "lambda.1se")
### R square of linear model
cor(predicted_train_linear, modeldata2$response)^2
cor(predicted_valid_linear, validation_data2$mean_protein_abundance)^2
### R square of linear model
cor(predicted2, modeldata2$response)^2
length(predicted2)
length(modeldata2)
length(modeldata2$response)
#PART 2
modeldata2 <- data.frame(response = myData$mean_protein_abundance, predictors2)
linear2 <- lm(response ~ ., data = modeldata2)
plot(predict(linear2), modeldata2$response)
validation_data2 <- read.csv("valid.csv")
validation_data2$predicted <- predict(linear2, as.data.frame(predictors.valid2))
cor(validation_data2$mean_protein_abundance, validation_data2$predicted)
predicted2 <- predict(linear2, newdata = as.data.frame(predictors.valid2))
length(predicted2)
#PART 2
modeldata2 <- data.frame(response = myData$mean_protein_abundance, predictors2)
linear2 <- lm(response ~ ., data = modeldata2)
linear2$qr
linear2
predicted_train_linear <- predict(linear2, newdata = modeldata2)
predicted_train_linear <- predict(linear2, data = modeldata2)
predicted_valid_linear <- predict(linear2, data = as.data.frame(predictors.valid2))
rm(predicted2)
predicted_valid_linear <- predict(linear2, data = as.data.frame(predictors.valid2))
### R square of linear model
cor(predicted_train_linear, modeldata2$response)^2
cor(predicted_valid_linear, validation_data2$mean_protein_abundance)^2
#PART 2
modeldata2 <- data.frame(response = myData$mean_protein_abundance, predictors2)
linear2 <- lm(response ~ ., data = modeldata2)
plot(predict(linear2), modeldata2$response)
validation_data2 <- read.csv("valid.csv")
validation_data2$predicted <- predict(linear2, as.data.frame(predictors.valid2))
cor(validation_data2$mean_protein_abundance, validation_data2$predicted)
predicted_train_linear <- predict(linear2, newdata = modeldata2)
predicted_valid_linear <- predict(linear2, newdata = as.data.frame(predictors.valid2))
### R square of linear model
cor(predicted_train_linear, modeldata2$response)^2
cor(predicted_valid_linear, validation_data2$mean_protein_abundance)^2
### R square of random forest
cor(predicted_train_rf, modeldata2$response)^2
cor(predicted_valid_rf, validation_data2$mean_protein_abundance)^2
### R square of lasso (glmnet)
cor(predicted_train_lasso, response)^2
predicted_train_lasso <- predict(lasso, newx = predictors2_matrix, s = "lambda.1se")[, 1]
predicted_valid_lasso <- predict(lasso, newx = predictors.valid2[, colnames(predictors2)], s = "lambda.1se")[, 1]
### R square of lasso (glmnet)
cor(predicted_train_lasso, response)^2
cor(predicted_valid_lasso, validation_data2$mean_protein_abundance)^2
# Crear DataFrame para almacenar los R^2 de cada modelo en los conjuntos de entrenamiento y prueba
for_plot <- data.frame(
model = c("Linear Regression", "Linear Regression",
"Random Forest", "Random Forest",
"Lasso", "Lasso"),
train_or_test = c("Train", "Test",
"Train", "Test",
"Train", "Test"),
R2 = c(
cor(predicted_train_linear, modeldata2$response)^2,  # Linear Regression Train
cor(predicted_valid_linear, validation_data2$mean_protein_abundance)^2,  # Linear Regression Test
cor(predicted_train_rf, modeldata2$response)^2,  # Random Forest Train
cor(predicted_valid_rf, validation_data2$mean_protein_abundance)^2,  # Random Forest Test
cor(predicted_train_lasso, response)^2,  # Lasso Train
cor(predicted_valid_lasso, validation_data2$mean_protein_abundance)^2  # Lasso Test
)
)
# Visualizar los valores R2 para asegurarnos de que están correctos
print(for_plot)
ggplot(for_plot, aes(x = model, y = R2, fill = train_or_test)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "R² Comparison for Models (Train vs Test)",
x = "Model",
y = "R²") +
scale_fill_manual(values = c("skyblue", "orange")) +
theme_minimal()
ggplot(for_plot, aes(x = model, y = R2, fill = train_or_test)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "R² Comparison for Models (Train vs Test)",
x = "Model",
y = "R²") +
scale_fill_manual(values = c("skyblue", "orange")) +
theme_minimal()
setwd("C:/Users/Lenovo/bioinformatics-")
library(ggplot2)
category <- c("Carbohydrates","Respiration", "Nucleosides and nucleotides", "Stress response","Protein Metabolism", "Regulation and Cell signalling","Cell Wall and Capsule","Miscellaneous","Photosynthesis","RNA Metabolism","Metabolism of Aromatic Compounds","Clustering-based subsystems","Phosphorus Metabolism","Phages, Prophages, Transposable elements","Secondary Metabolism","Dormancy and Sporulation","Amino Acids and Derivatives","Iron acquisition and metabolism","Phages, Prophages, Transposable elements, Plasmids","Cell Division and Cell Cycle","Membrane Transport","Nitrogen Metabolism","Sulfur Metabolism","DNA Metabolism","Cofactors, Vitamins, Prosthetic Groups, Pigments","Fatty Acids, Lipids, and Isoprenoids","Virulence, Disease and Defense","Potassium metabolism","Motility and Chemotaxis","Virulence")
case_002 <- c(14,1,3,9,7,1,1,0,0,2,0,10,0,0,0,2,5,1,0,8,1,2,0,15,3,2,3,4,0,0)
reference <- c(10,1,3,9,7,1,1,0,0,1,0,10,0,0,0,2,5,1,0,8,3,2,0,19,3,2,4,4,0,0)
library(reshape2)
# Create the data frame
info <- data.frame(
category = category,
case_002 = case_002,
reference = reference
)
# Reshape the data
info.m <- melt(info, id.vars = "category")
info.m <- subset(info.m, value != 0)
# Filter out rows with zero values in the 'value' column
info.m <- melt(info, id.vars = "category")
info.m <- subset(info.m, value != 0)
# Customizing the plot
boxplot1 <- ggplot(info.m, aes(fill = variable, x = value, y = category)) +
geom_bar(position = "dodge", stat = "identity", color = "black", width = 0.7) +
scale_fill_manual(
values = c("skyblue", "slateblue"),
labels = c("Veillonella atypical seminalis", "Reference"),    # Legend labels
name = "Strain"                          # Legend title
) +
labs(title = "FUNCTIONAL CATEGORIES COMPARISON BETWEEN STRAINS", x = "Values", y = "Category") +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "bold", hjust = 0.6)
) +
geom_text(aes(label = value), position = position_dodge(width = 0.8), hjust = -0.2, size = 2.1)
---
output:
rmdformats::material:
self_contained: false
bibliography: bibliography.bib
csl: "apa-numeric.csl"
cites: yes
link-citations: yes
toc: true
---
setwd("~/Desktop/project/bioinformatics-")
